name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    environment: ProPresenter PCO Live
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.12'
          - os: macos-latest
            python-version: '3.12'

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}


      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./src/requirements.txt
          pip install pyinstaller

      - name: Build with PyInstaller for macOS
        if: matrix.os == 'macos-latest'
        run: |
          pyinstaller --onefile ./src/main.py

      - name: Build with PyInstaller for Windows and Linux
        if: matrix.os != 'macos-latest'
        run: pyinstaller --onefile ./src/main.py

      - name: Test Windows Executable
        if: matrix.os == 'windows-latest'
        run: dist\main.exe -t
        timeout-minutes: 2  # Set an appropriate timeout

      - name: Test Linux Executable
        if: matrix.os == 'ubuntu-20.04'
        run: dist/main -t
        timeout-minutes: 2  # Set an appropriate timeout

      - name: Test Mac Executable
        if: matrix.os == 'macos-latest'
        run: dist/main -t
        timeout-minutes: 2  # Set an appropriate timeout

      - name: Package Windows Artifact
        if: matrix.os == 'windows-latest'
        run: |
          mv dist/main.exe dist/PcoLive.exe
          cp README.md dist/
          cp LICENSE dist/
          cp CHANGELOG.md dist/
          mv dist PcoLive
          Compress-Archive -Path ./PcoLive -DestinationPath PcoLive-windows.zip
        working-directory: ${{github.workspace}}

      - name: Package macOS Artifact
        if: matrix.os == 'macos-latest'
        run: |
          mv dist/main dist/PcoLive
          cp README.md dist/
          cp LICENSE dist/
          cp CHANGELOG.md dist/
          mv dist PcoLive
          zip -r PcoLive-macOS.zip ./PcoLive
        working-directory: ${{github.workspace}}

      - name: Package Linux Artifact
        if: matrix.os == 'ubuntu-20.04'
        run: |
          ls -l dist
          mv dist/main dist/PcoLive
          cp README.md dist/
          cp LICENSE dist/
          cp CHANGELOG.md dist/
          ls -l dist
          mv dist PcoLive
          tar -czvf PcoLive-Linux.tar.gz -C ./ PcoLive
        working-directory: ${{github.workspace}}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: artifact-${{ matrix.os }}
          path: |
            PcoLive-windows.zip
            PcoLive-macOS.zip
            PcoLive-Linux.tar.gz

  release:
    if: "contains(github.event.head_commit.message, 'Release: ')"
    environment: ProPresenter PCO Live
    permissions:
      contents: write
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Create Release Version
        uses: CupOfTea696/gh-action-auto-release@v1.0.2
        id: create_release
        with:
          title: "Release: $version"
          tag: "v$semver"
          draft: false
          regex: "/^Release: #{semver}$/i"
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: List build artifacts
        run: ls -l artifacts/


      - name: Upload Windows Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/artifact-windows-latest/PcoLive-windows.zip
          asset_name: PcoLive-Windows.zip
          asset_content_type: application/zip

      - name: Upload macOS Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/artifact-macos-latest/PcoLive-macOS.zip
          asset_name: PcoLive-macOS.zip
          asset_content_type: application/zip

      - name: Upload Linux Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/artifact-ubuntu-20.04/PcoLive-Linux.tar.gz
          asset_name: PcoLive-Linux.tar.gz
          asset_content_type: application/gzip
